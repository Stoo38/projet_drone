cd /tp/xph3app/xph3app104/TP_Verif/onespin
onespin::create_command -force -command_level hidden -callback ::onespin_internal::basics::do_limit_patch -help_short {} -arg_num 1 -arg_desc version_number limit_patch 
onespin::create_command -force -arg_num 1 -arg_desc instancelist -callback ::onespin_internal::ec_commands::do_add_ignored_instance_output -example {} -modes ec -help_short {Adds all the ignored outputs for the given instances} -help_long {Adds all the ignored outputs for the given instances. For each of the instances in 'instancelist' adds all the outputs of the instance as ignored outputs for comparison.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {ignore the outputs from golden instance list} hidden false no_help {ignore the outputs from golden instance list}} -opt {name revised type YESNO default false help {ignore the outputs from revised instance list} hidden false no_help {ignore the outputs from revised instance list}} add_ignored_instance_output 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_map_design -example {} -modes setup -help_short {Creates the mapped module pairs for the elaborated designs} -help_long {Creates the mapped module pairs for the elaborated designs. Top level module is the same as the top level of the elaborated design. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name debug_level type STRING default 0 help {level used for debugging} hidden false synopsis unsigned} -opt {name check_interface type YESNO default true help {check the interface of the mapped modules} hidden false no_help {check the interface of the mapped modules}} -opt {name include_cells type YESNO default false help {include the library cells in verification} hidden false no_help {include the library cells in verification}} -opt {name log_file type STRING default {} help {write the results to a log file} hidden false synopsis string} -opt {name replace_regexp type STRING default {} help {list of regular expressions (even number of elements) to be replaced before name-based mapping} hidden false synopsis list} map_design 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_set_map_design_option -example {} -modes setup -help_short {The options that can be applied during  module mapping} -help_long {The options that can be applied during  module mapping. If 'gen_loop_mods' == '1', then remove mapping of the module pairs which  are in 'if and for generate loops'. If 'rmods_per_gmod' is specified, then remove mapping of the module pairs where the 'number of revised modules per golden module' &gt;= <replaceable>number</replaceable>. If 'gmod_states' is specified, then remove mapping of the module pairs where the 'number of states in golden module' &lt;= <replaceable>number</replaceable>. If 'arith_mods' == '1', then remove mapping of the module pairs which  have arithmetic. If 'ram_mods' == '1', then remove mapping of the module pairs which  have RAMs. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name naming_style type STRING default {} help {Signal naming style 'onespin|sv'} hidden true synopsis string} -opt {name gen_loop_mods type STRING default {} help {remove mapping for module pairs which are in 'if and for generate loops'} hidden false synopsis unsigned} -opt {name rmods_per_gmod type STRING default {} help {remove mapping for module pairs w.r.t number of revised modules per golden module} hidden false synopsis unsigned} -opt {name gmod_states type STRING default {} help {remove mapping for module pairs w.r.t the number of states in golden module} hidden false synopsis unsigned} -opt {name arith_mods type STRING default {} help {remove mapping for module pairs which have arithmetic} hidden false synopsis unsigned} -opt {name ram_mods type STRING default {} help {remove mapping for module pairs which have RAMs} hidden false synopsis unsigned} set_map_design_option 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_get_map_design_option -example {} -modes setup -help_short {Get settings of options that can be applied during  module mapping} -help_long {Get settings of options that can be applied during  module mapping. For a description of the options, please refer to command set_map_design_option. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name gen_loop_mods type YESNO default false help {get the option value to remove mapping for module pairs which are in 'if and for generate loops'} hidden false no_help {get the option value to remove mapping for module pairs which are in 'if and for generate loops'}} -opt {name rmods_per_gmod type YESNO default false help {get the option value to remove mapping for module pairs w.r.t number of revised modules per golden module} hidden false no_help {get the option value to remove mapping for module pairs w.r.t number of revised modules per golden module}} -opt {name gmod_states type YESNO default false help {get the option value to remove mapping for module pairs w.r.t the number of states in golden module} hidden false no_help {get the option value to remove mapping for module pairs w.r.t the number of states in golden module}} -opt {name arith_mods type YESNO default false help {get the option value to remove mapping for module pairs which have arithmetic} hidden false no_help {get the option value to remove mapping for module pairs which have arithmetic}} -opt {name ram_mods type YESNO default false help {get the option value to remove mapping for module pairs which have RAMs} hidden false no_help {get the option value to remove mapping for module pairs which have RAMs}} get_map_design_option 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_compare_design -example {} -modes setup -help_short {Compares all the mapped module pairs in bottom-up topological order} -help_long {Compares all the mapped module pairs in bottom-up topological order. 'compare_design' generates for each sub-module pair a tcl script in the directory specified. The tcl scripts are put into <replaceable>script_directory</replaceable>/scripts. Onespin database is saved in <replaceable>script_directory</replaceable>/db. The results of comparison are put into <replaceable>script_directory</replaceable>/scripts/result. 
	The option 'module_command_cpu_time' is used to set the cpu time limit for all commands used in module verification. The option 'module_global_memory' is used to set the global memory limit for module verification. 
	If 'num_jobs' is specified, the mapped modules pairs are distributed into 'num_jobs' bundles and allows parallel verification of all the bundles at the same time. If 'num_jobs' is given, then the flag 'blackbox_failing_modules' as parallel processing can only be done if the failed modules are blackboxed in further comparison of modules. The option 'partition_database' partitions the database into 'num_jobs' bundles. 
	If 'compute_boundary_constraints' is specified, the constraints are computed for the module pairs and used during verification of module pairs. The constraints are written to a different file <replaceable>sub-module_pair</replaceable>.cons and used during verification of the sub modules. To write the computed constraits to a file use 'write_boundary_constraints'. To control the effort used to compute the constants use the option 'effort_initial_state' or 'effort_reset_state'. 
	If 'use_local_script' is specified then a local tcl script is to be used during verification instead of 'compare_modules.tcl' from onespin distribution. Option 'debug_level'(1-5) is used to write more verbose messages to onespin shell. 'remote_command' can be used if different machines are to be used in parallel for distribured computing. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name blackbox_failing_modules type YESNO default false help {allows blackboxing of the failed modules} hidden false no_help {allows blackboxing of the failed modules}} -opt {name compute_boundary_constraints type YESNO default false help {compute the constraints for verification} hidden false no_help {compute the constraints for verification}} -opt {name effort_initial_state type STRING default 3 help {effort used to analyze undefined initial states 
	is exclusive to: effort_reset_state} hidden false synopsis unsigned} -opt {name effort_reset_state type STRING default 0 help {effort used to compute a reset sequence 
	is exclusive to: effort_initial_state} hidden false synopsis unsigned} -opt {name write_boundary_constraints type YESNO default false help {write the computed constraints to a file} hidden false no_help {write the computed constraints to a file}} -opt {name debug_level type STRING default 0 help {level used for debugging} hidden false synopsis unsigned} -opt {name script_directory type STRING default onespin help {write the sub-module scripts to the directory} hidden false synopsis string} -opt {name use_module_limits type YESNO default false help {deprecated, apply cpu time limit for the verification of each module} hidden true no_help {deprecated, apply cpu time limit for the verification of each module}} -opt {name module_command_cpu_time type STRING default 0 help {set the cpu time limit for all commands used in module verification} hidden false synopsis seconds} -opt {name module_global_memory type STRING default 0 help {set the global memory for the verification of each module} hidden false synopsis MB} -opt {name partition_database type YESNO default true help {partition the datase for the bundles} hidden false no_help {partition the datase for the bundles}} -opt {name num_jobs type STRING default 0 help {number of jobs to launch in parallel} hidden false synopsis unsigned} -opt {name remote_command type STRING default {} help {remote command to launch onespin tool} hidden false synopsis string} -opt {name replace_regexp type STRING default {} help {list of regular expressions (even number of elements) to be replaced before name-based mapping} hidden false synopsis list} -opt {name s type YESNO default false help {stop after generation of verification scripts} hidden false no_help {stop after generation of verification scripts}} -opt {name use_local_script type STRING default {} help {use the local 'compare_module.tcl' script} hidden false synopsis string} compare_design 
onespin::create_command -force -arg_num 1 -arg_desc bundle_pid -callback ::onespin_internal::compare_modules::do_add_bundle_pid -example {} -modes setup -help_short {Add bundle process id to the list of running bundle processes} -help_long {Add bundle process id to the list of running bundle processes. 
	Used during parallel processing to check the current running processes and the bundles that exit abnormally. 
	The command is used only in hierarchical parallel verification flow. The command is automatically written to the compare_design.tcl script during verification of the designs using command 'compare_design.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} add_bundle_pid 
onespin::create_command -force -arg_num 1 -arg_desc resultfile -callback ::onespin_internal::compare_modules::do_report_compare_module -example {} -modes ec -help_short {Reports the compare status of the compared module} -help_long {Reports the compare status of the compared module. Reports incomplete port mapping and report inconsistent blackboxing done. Writes the result to the <replaceable>resultfile</replaceable>. 
	The command is used only in hierarchical verification flow. The command is automatically written to the module scripts during verification of the designs using command 'compare_design'.  } -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name with_constraints type YESNO default false help {constraints used while verification} hidden false no_help {constraints used while verification}} -opt {name blackbox_failing_modules type YESNO default false help {allows blackboxing of the failed modules} hidden false no_help {allows blackboxing of the failed modules}} report_compare_module 
onespin::create_command -force -arg_num 1 -arg_desc script_directory -callback ::onespin_internal::compare_modules::do_report_compare_design_results -example {} -modes {setup ec} -help_short {Reports the result summary of the module pair comparisons from script directory.} -help_long {Report information about the result summary of the module pair comparisons from script directory. If none of the options -passed, -failed, -skipped, and -filter are given, the summary is reported. Otherwise the information for the selected kind(s) is reported. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name summary type YESNO default false help {print the summary of passed, failed and skipped module pair comparisions} hidden false no_help {print the summary of passed, failed and skipped module pair comparisions}} -opt {name filter type STRING default {} help {filter by names that match a pattern 
	is exclusive to: summary} hidden false synopsis list-of-patterns} -opt {name passed type YESNO default false help {passed modules 
	is exclusive to: summary} hidden false no_help {passed modules 
	is exclusive to: summary}} -opt {name failed type YESNO default false help {failed modules 
	is exclusive to: summary} hidden false no_help {failed modules 
	is exclusive to: summary}} -opt {name skipped type YESNO default false help {skipped modules 
	is exclusive to: summary} hidden false no_help {skipped modules 
	is exclusive to: summary}} report_compare_design_results 
onespin::create_command -force -arg_num 1 -arg_desc script_directory -callback ::onespin_internal::compare_modules::do_get_compare_design_results -example {} -modes {setup ec} -help_short {Get the result of the module pair comparisons from script directory.} -help_long {Get the result of the module pair comparisons from script directory. Returns status '1' if the designs are equivalent otherwise '0'. If none of the options -passed, -failed, or -skipped are given, the status is returned. Otherwise the module pairs for the selected kind(s) are returned. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name filter type STRING default {} help {filter by names that match a pattern} hidden false synopsis list-of-patterns} -opt {name passed type YESNO default false help {passed modules} hidden false no_help {passed modules}} -opt {name failed type YESNO default false help {failed modules} hidden false no_help {failed modules}} -opt {name skipped type YESNO default false help {skipped modules} hidden false no_help {skipped modules}} get_compare_design_results 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_modules::do_report_compare_design -example {} -modes {setup ec} -help_short {Reports the result summary of the module pair comparisons.} -help_long {Reports the result summary of the module pair comparisons. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}}. 
	The command is used only in hierarchical verification flow. The command is automatically written to the compare_design.tcl script during verification of the designs using command 'compare_design.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name blackbox_failing_modules type YESNO default false help {allows blackboxing of the failed modules} hidden false no_help {allows blackboxing of the failed modules}} -opt {name script_directory type STRING default {} help {directory of sub-module scripts} hidden false synopsis string} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_design 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_modules::do_report_compare_bundle -example {} -modes {setup ec} -help_short {Reports the result summary of the module pair comparisons for a bundle.} -help_long {Reports the result summary of the module pair comparisons for a bundle. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}} 
	The command is used only in hierarchical parallel verification flow. The command is automatically written to the bundle scripts during verification of the designs using command 'compare_design.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_bundle 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_report_bundle_result -example {} -modes {setup ec} -help_short {Reports the result summary of the bundles.} -help_long {Reports the result summary of the complete verification after all the bundles are verified. Gets the bundle results from the 'script_directory' and computes the result summary. 
	The command is used only in hierarchical paralle verification flow. The command is automatically written to the compare_design.tcl script during verification of the designs using command 'compare_design'. 	} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name num_jobs type STRING default 0 help {number of jobs launched in parallel} hidden false synopsis unsigned} -opt {name script_directory type STRING default onespin help {directory of sub-module scripts} hidden false synopsis string} report_bundle_result 
onespin::create_command -force -arg_num 1 -arg_desc debug_level -callback ::onespin_internal::compare_modules::do_set_compare_modules_debug_level -example {} -modes {setup ec} -help_short {Set the debug level for compare modules } -help_long {Set the debug level for compare modules This command is used for debugging. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} set_compare_modules_debug_level 
onespin::create_command -force -arg_num 1 -arg_desc resultdir -callback ::onespin_internal::compare_modules::do_check_results -example {} -modes {setup ec} -help_short {Checks the passed, skipped and failed modules} -help_long {Checks the passed, skipped and failed modules This command is used for debugging. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name passed type STRING default {} help {number of passed modules} hidden false synopsis unsigned} -opt {name failed type STRING default {} help {number of failed modules} hidden false synopsis unsigned} -opt {name skipped type STRING default {} help {number of skipped modules} hidden false synopsis unsigned} check_results 
onespin::create_command -force -arg_num 1 -arg_desc module_patterns -callback ::onespin_internal::compare_modules::do_get_modules_design -example {} -modes {setup ec} -help_short {get the modules after map_design} -help_long {Get the modules after map_design. Returns all the modules matching 'module_patterns'. If 'golden' or 'revised' is specified the corresponding design modules are returned. If 'mapped' is specified, return all the mapped modules from the corresponding design matching the module_pattern. If 'unmapped' is specified, return all the unmapped modules from the corresponding design matching the module_pattern. If 'invert' is specified, return all the modules from the corresponding design that do not match the module_pattern. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} -opt {name mapped type YESNO default false help {mapped modules} hidden false no_help {mapped modules}} -opt {name unmapped type YESNO default false help {unmapped modules} hidden false no_help {unmapped modules}} -opt {name invert type YESNO default false help {modules which does not match the pattern} hidden false no_help {modules which does not match the pattern}} get_modules_design 
onespin::create_command -force -arg_num 1 -arg_desc module_pairs -callback ::onespin_internal::compare_modules::do_add_module_mapping -example {} -modes setup -help_short {add the module pairs to the mapped module list} -help_long {Add the module pairs to the mapped module list. 'module_pairs' is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>}}. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} add_module_mapping 
onespin::create_command -force -arg_num 1 -arg_desc module_list -callback ::onespin_internal::compare_modules::do_delete_module_mapping -example {} -modes setup -help_short {delete the module mappings} -help_long {Delete the module mappings. If 'golden' or 'revised' is specified the corresponding design modules are deleted. 'module_list' is the list of modules from the corresponding design to be deleted. If '*' is specified then all the module mappings are deleted. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} delete_module_mapping 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_get_module_mapping -example {} -modes setup -help_short {get the module mappings} -help_long {Get the module mappings. If 'golden' or 'revised' is specified the corresponding design modules are returned. If 'mapped' is specified, return all the mapped modules. If 'unmapped' is specified, the result contains a two-element list where the first element contains the list of unmapped golden modules and the second element the list of unmapped revised modules. If 'invert' is specified, return all the modules from the corresponding design that do not match the filter. If 'filter' is specified then the modules are filtered by names that match a pattern 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} -opt {name mapped type YESNO default false help {mapped modules of design} hidden false no_help {mapped modules of design}} -opt {name unmapped type YESNO default false help {unmapped modules of design} hidden false no_help {unmapped modules of design}} -opt {name invert type YESNO default false help {modules which does not match the pattern} hidden false no_help {modules which does not match the pattern}} -opt {name include_cells type YESNO default false help {include the library cell modules} hidden false no_help {include the library cell modules}} -opt {name filter type STRING default {} help {filter by names that match a pattern} hidden false synopsis list-of-patterns} get_module_mapping 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_report_module_mapping -example {} -modes setup -help_short {report the current module mappings} -help_long {Report information about the current module mapping. If none of the options -mapped, -unmapped, and -filter are given, the summary is reported. Otherwise the module mapping for the selected kind(s) is reported. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name mapped type YESNO default false help {show mapped modules of design
	is exclusive to: summary} hidden false no_help {show mapped modules of design
	is exclusive to: summary}} -opt {name unmapped type YESNO default false help {show unmapped modules of design
	is exclusive to: summary} hidden false no_help {show unmapped modules of design
	is exclusive to: summary}} -opt {name include_cells type YESNO default false help {include the library cell modules} hidden false no_help {include the library cell modules}} -opt {name summary type YESNO default false help {print a short summary of mapped/unmapped modules only
	is exclusive to: mapped, unmapped} hidden false no_help {print a short summary of mapped/unmapped modules only
	is exclusive to: mapped, unmapped}} -opt {name filter type STRING default {} help {filter by names that match a pattern} hidden false synopsis list-of-patterns} report_module_mapping 
onespin::create_command -force -arg_num 1 -arg_desc filename -callback ::onespin_internal::compare_modules::do_save_module_mapping -example {} -modes setup -help_short {save current module mapping to file} -help_long {Save current module mapping to file. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type YESNO default false help {overwrite file if it already exists} hidden false no_help {overwrite file if it already exists}} save_module_mapping 
onespin::create_command -force -arg_num 1 -arg_desc script_directory -callback ::onespin_internal::compare_modules::do_clear_compare_design_results -example {} -modes {setup ec} -help_short {Clear all the results from the previous computation of command 'compare_design'} -help_long {Clear all the results from the previous computation of command 'compare_design'. 
	The command is used only in hierarchical verification flow.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} clear_compare_design_results 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_balance_black_box_instances -example {} -modes setup -help_short {Balance the black-boxing of the mapped instances} -help_long {Balance the black-boxing of the instances and add the unbalanced black-boxed instances to command 'add_compile_option'. The user can specify the additional instances to be blackboxed using the command 'add_compile_option -black_box_instances' or 'add_compile_option -black_box'. Please run the command 'compile -both' to apply the blackboxes found. 
	The command maps the instances and tries to balance the black-boxed instances. If the corresponding mapped instance is not found in the other design then the method tries to map the parent instance and continues to go to the higher level till a mapping can be found. 
	The option 'check_interface' checks the interface of the black-boxed instances and gives a warning if the interfaces are not matched. 
	The command returns the current value of the pair {<replaceable>get_compile_option -golden -black_box_instances</replaceable> <replaceable>get_compile_option -revised -black_box_instances</replaceable>}. 
	Note that blackboxing is not recommended in presence of cross boundary optimizations during synthesis.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name check_interface type YESNO default true help {check the interface of the mapped instances} hidden false no_help {check the interface of the mapped instances}} -opt {name debug_level type STRING default 0 help {level used for debugging} hidden true synopsis unsigned} balance_black_box_instances 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_balance_black_box_modules -example {} -modes setup -help_short {Balance the black-boxing of the mapped modules} -help_long {Balance the black-boxing of the modules and add the unbalanced black-boxed modules to command 'add_elaborate_option'. The user can specify the additional modules to be blackboxed using the command 'add_elaborate_option -black_box'. Please run the command 'elaborate -both' to apply the blackboxes found. 
	The command maps the modules and tries to balance the black-boxed modules. If the corresponding mapped module is not found in the other design then the method tries to map the parent module and continues to go to the higher level till a mapping can be found. 
	The option 'check_interface' checks the interface of the black-boxed modules and gives a warning if the interfaces are not matched. 
	The command returns the current value of the pair {<replaceable>get_elaborate_option -golden -black_box</replaceable> <replaceable>get_elaborate_option -revised -black_box</replaceable>}. 
	Note that blackboxing is not recommended in presence of cross boundary optimizations during synthesis.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name check_interface type YESNO default true help {check the interface of the mapped modules} hidden false no_help {check the interface of the mapped modules}} -opt {name debug_level type STRING default 0 help {level used for debugging} hidden true synopsis unsigned} balance_black_box_modules 
onespin::create_command -force -arg_num 1 -arg_desc result_file -callback ::onespin_internal::compare_modules::do_check_module_verified -example {} -modes {setup ec} -help_short {Check if the module is already verified} -help_long {Check if the module is already verified and return '1' if passed else '0'. The option 'module_pair' specifies the modules pair to be checked. The option 'previous_round' checks if the module is verified in the previous round. The argument 'result_file' specifies the location of the result file for the modules pair to be checked. 
	The command is used only in hierarchical verification flow. The command is automatically written to the module scripts during verification of the designs using command 'compare_design -compute_boundary_constraints'.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name module_pair type STRING default {} help {module pair to be checked} hidden false synopsis list} -opt {name previous_round type YESNO default false help {module is equivalent in previous rounds} hidden false no_help {module is equivalent in previous rounds}} check_module_verified 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_modules::do_setup_initial_state -example {} -modes ec -help_short {Setup the initial state for saving module constraints and redundants} -help_long {Setup the initial state for saving module constraints and redundants. The command is used to set the initial state for the computation of module constraints and redundants. To control the effort used to compute the constants use the option 'effort_initial_state' or 'effort_reset_state'. 
	The command is used only in hierarchical verification flow. The command is automatically written to the module scripts during verification of the designs using command 'compare_design -compute_boundary_constraints'.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name effort_initial_state type STRING default 3 help {effort used to analyze undefined initial states 
	is exclusive to: effort_reset_state} hidden false synopsis unsigned} -opt {name effort_reset_state type STRING default 0 help {effort used to compute a reset sequence 
	is exclusive to: effort_initial_state} hidden false synopsis unsigned} setup_initial_state 
onespin::create_command -force -arg_num 1 -arg_desc constraint_file -callback ::onespin_internal::compare_modules::do_save_module_constraints -example {} -modes ec -help_short {Save the module constraints to a file} -help_long {Save the module constraints to a file. The option 'module_pair' specifies the modules pair for which the constraints are to be saved. The option 'mod_inst_pairs' specifies the modules pair instance paths for this module and the sub modules. The list contains the  elements {{<replaceable>module pair</replaceable> <replaceable>module script</replaceable>} <replaceable>instance pairs</replaceable>} The option 'parent_modpairs' specifies the parent module pairs for this module. The list contains the  elements {<replaceable>parent module pair</replaceable> <replaceable>parent module script</replaceable>} The option 'golden_ignored_outputs' specifies the ignored outputs of golden design. The option 'revised_ignored_outputs' specifies the ignored outputs of revised design. The argument 'constraint_file' gives the constraint file location to save the constraints for the module pair. 
	The command is used only in hierarchical verification flow. The command is automatically written to the module scripts during verification of the designs using command 'compare_design -compute_boundary_constraints'.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name module_pair type STRING default {} help {module pair under consideration} hidden false synopsis list} -opt {name mod_inst_pairs type STRING default {} help {Instance paths for this module and the sub modules} hidden false synopsis list} -opt {name parent_modpairs type STRING default {} help {Parent modules instantiating this module} hidden false synopsis list} -opt {name golden_ignored_outputs type STRING default {} help {Ignored outputs of golden design} hidden false synopsis list} -opt {name revised_ignored_outputs type STRING default {} help {Ignored outputs of revised design} hidden false synopsis list} save_module_constraints 
onespin::create_command -force -arg_num 1 -arg_desc module_pairs -callback ::onespin_internal::compare_modules::do_compute_write_boundary_constraints -example {} -modes {setup ec} -help_short {Compute and write the constraints} -help_long {Compute and write the constraints. The option 'num_jobs' specifies the number of jobs for parallel verification. The option 'script_directory' specifies the directory of the scripts written. If 'write_full_constraints' is specified, then the complete constraints are written to file <replaceable>script_directory</replaceable>/scripts/cons/Full_Constraints<replaceable>round_number</replaceable>.cons The argument 'module_pairs' specifies the module pairs of the design. The list contains the  elements {<replaceable>module pair</replaceable> <replaceable>module script</replaceable>}. 
	The command is used only in hierarchical verification flow. The command is automatically written to the module scripts during verification of the designs using command 'compare_design -compute_boundary_constraints -write_boundary_constraints'. 	} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name num_jobs type STRING default 0 help {number of jobs launched in parallel} hidden false synopsis unsigned} -opt {name script_directory type STRING default onespin help {write the sub-module scripts to the directory} hidden false synopsis string} -opt {name write_full_constraints type YESNO default false help {write the full constraints to a file} hidden false no_help {write the full constraints to a file}} compute_write_boundary_constraints 
onespin::create_command -force -arg_num 1 -arg_desc redundant_bits -callback ::onespin_internal::compare_modules::do_delete_redundant_mapping -example {} -modes ec -help_short {Delete the redundant mapping from design} -help_long {Delete the redundant bit mappings. The options 'golden' or 'revised' specifies the design of the 'redundant_bits'. By default the 'golden' design is selected. The argument 'redundant_bits' specifies the redundant bits of the design. 
	The command is used only in hierarchical verification flow. The command is automatically written to the module scripts during verification of the designs using command 'compare_design -compute_boundary_constraints'.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {use nets and ports of golden design; is exclusive to: revised} hidden false no_help {use nets and ports of golden design; is exclusive to: revised}} -opt {name revised type YESNO default false help {use nets and ports of revised design; is exclusive to: golden} hidden false no_help {use nets and ports of revised design; is exclusive to: golden}} delete_redundant_mapping 
onespin::create_command -force -arg_num 1 -arg_desc bundle_name -callback ::onespin_internal::compare_modules::do_write_bundle_log -example {} -modes {setup ec} -help_short {Write the bundle log file} -help_long {Write the bundle log file. The option 'script_directory' specifies the directory of the scripts written. The argument 'bundle_name' specifies the bundle name. 
	The command is used only in hierarchical verification flow. The command is automatically written to the bundle scripts during verification of the designs using command 'compare_design -compute_boundary_constraints'.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name script_directory type STRING default onespin help {write the sub-module scripts to the directory} hidden false synopsis string} write_bundle_log 
onespin::create_command -force -arg_num 1 -arg_desc zfast_rtlfe -callback ::onespin_internal::compare_zfast::do_import_zfast -example {} -modes setup -help_short {reads the 'rtlfe_*.tcl' from zfast synthesis and writes onespin script} -help_long {reads the 'rtlfe_*.tcl' from zfast synthesis and writes onespin script} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {write onespin script} hidden false synopsis string} -opt {name synthesis_directory type STRING default {} help {synthesis directory} hidden false synopsis string} -opt {name script_directory type STRING default onespin help {write the onespin scripts to the directory} hidden false synopsis string} -opt {name num_jobs type STRING default 0 help {number of jobs to launch in parallel} hidden false synopsis unsigned} -opt {name global_memory type STRING default 0 help {set the global memory limit in <replaceable>MB</replaceable>} hidden false synopsis unsigned} -opt {name command_cpu_time type STRING default 0 help {set the cpu time limit for all commands in <replaceable>seconds</replaceable>} hidden false synopsis unsigned} -opt {name remote_command type STRING default {} help {remote command to launch onespin tool} hidden false synopsis string} -opt {name s type YESNO default false help {stop after generation of verification scripts} hidden false no_help {stop after generation of verification scripts}} -opt {name tclfile type STRING default {} help {tcl file to use for generated scripts} hidden false synopsis string} import_zfast 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_zfast::do_map_zfast -example {} -modes setup -help_short {Creates the mapped module pairs for the elaborated designs for zfast} -help_long {Creates the mapped module pairs for the elaborated designs for zfast. Top level module is the same as the top level of the elaborated design for zfast. Uses the edif files in the synthesis directory for mapping the modules.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name synthesis_directory type STRING default {} help {synthesis directory} hidden false synopsis string} map_zfast 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_zfast::do_compare_zfast -example {} -modes setup -help_short {Compares all the mapped module pairs for Zfast} -help_long {Compares all the mapped module pairs for Zfast. 'compare_zfast' generates for each sub-module pair a tcl script in the directory specified. The tcl scripts are put into <replaceable>script_directory</replaceable>/scripts. Onespin database is saved in <replaceable>script_directory</replaceable>/db. The results of comparision are put into <replaceable>script_directory</replaceable>/scripts/result. If 'num_jobs' is specified, the mapped modules pairs are distributed into 'num_jobs' bundles and allows parallel verification of all the bundles at the same time. 'remote_command' can be used if different machines are to be used in parallel for distribured computing.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name use_module_limits type YESNO default false help {apply cpu time limit for the verification of each module} hidden false no_help {apply cpu time limit for the verification of each module}} -opt {name synthesis_directory type STRING default {} help {synthesis directory} hidden false synopsis string} -opt {name script_directory type STRING default onespin help {write the onespin scripts to the directory} hidden false synopsis string} -opt {name num_jobs type STRING default 0 help {number of jobs to launch in parallel} hidden false synopsis unsigned} -opt {name remote_command type STRING default {} help {remote command to launch onespin tool} hidden false synopsis string} -opt {name s type YESNO default false help {stop after generation of verification scripts} hidden false no_help {stop after generation of verification scripts}} -opt {name tclfile type STRING default {} help {tcl file to use for generated scripts} hidden false synopsis string} compare_zfast 
onespin::create_command -force -arg_num 1 -arg_desc resultfile -callback ::onespin_internal::compare_zfast::do_report_compare_zfast_module -example {} -modes ec -help_short {Reports the compare status of the compared zfast module} -help_long {Reports the compare status of the compared zfast module. Reports incomplete port mapping and report inconsistent blackboxing done. Writes the result to the <replaceable>resultfile</replaceable>} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} report_compare_zfast_module 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_zfast::do_report_compare_zfast -example {} -modes {setup ec} -help_short {Reports the result summary of the module pair comparisions.} -help_long {Reports the result summary of the module pair comparisions. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}}} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_zfast 
onespin::create_command -force -arg_num 1 -arg_desc modulepairs -callback ::onespin_internal::compare_zfast::do_report_compare_zfast_bundle -example {} -modes {setup ec} -help_short {Reports the result summary of the module pair comparisions for a bundle.} -help_long {Reports the result summary of the module pair comparisions for a bundle. Module pairs is the list of {{<replaceable>Golden Module</replaceable> <replaceable>Revised Module</replaceable>} {TCL file for this modulepair}}} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name write type STRING default {} help {writes the result to a file} hidden false synopsis string} report_compare_zfast_bundle 
onespin::create_command -force -arg_num 1 -arg_desc bundlescripts -callback ::onespin_internal::compare_zfast::do_report_zfast_bundle_result -example {} -modes {setup ec} -help_short {Reports the result summary of the bundles.} -help_long {Reports the result summary of the complete verification after all the bundles are verified. 'bundlescripts' is the list of bundle scripts.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} report_zfast_bundle_result 
onespin::create_command -force -arg_num 1 -arg_desc module_patterns -callback ::onespin_internal::compare_zfast::do_get_modules_zfast -example {} -modes {setup ec} -help_short {get the modules after map_zfast} -help_long {Get the modules after map_zfast. Returns all the modules matching 'module_patterns'. If 'golden' or 'revised' is specified the corresponding design modules are returned. If 'mapped' is specified, return all the mapped modules from the corresponding design matching the module_pattern. If 'unmapped' is specified, return all the unmapped modules from the corresponding design matching the module_pattern. If 'invert' is specified, return all the modules from the corresponding design that do not match the module_pattern.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} -opt {name mapped type YESNO default false help {mapped modules} hidden false no_help {mapped modules}} -opt {name unmapped type YESNO default false help {unmapped modules} hidden false no_help {unmapped modules}} -opt {name invert type YESNO default false help {modules which does not match the pattern} hidden false no_help {modules which does not match the pattern}} get_modules_zfast 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::compare_zfast::do_map_transformed_signals_zfast -example {} -modes ec -help_short {Transform and map the signal names} -help_long {Transforms the signals names using the known transformations for signals and map them..} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name input type YESNO default false help {transform and map unmapped input signals} hidden false no_help {transform and map unmapped input signals}} -opt {name output type YESNO default false help {transform and map unmapped output signals} hidden false no_help {transform and map unmapped output signals}} -opt {name state type YESNO default false help {transform and map unmapped state signals} hidden false no_help {transform and map unmapped state signals}} map_transformed_signals_zfast 
onespin::create_command -force -arg_num 1 -arg_desc net -callback ::onespin_internal::feedback_loops::do_get_loops -example {} -modes {setup ec} -help_short {get the loops starting from net} -help_long {get the loops starting from net. If 'all' is specified, then all the loops below the net are found; else the shortest loops below the net are found. If 'depth' is specified, then the search stops after specific depth. To skip the nets inside the library cells of the loops specify the option 'skip_library_cells'. To skip the loops which have sequential elements specify the option 'exclude_sequential_elements'. Length of the loops to be found can be specified using the option 'length', used only with option 'all'. The options 'golden' or 'revised' correspond to golden or revised design.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name depth type INT default 0 help {stop search after depth} hidden false} -opt {name all type YESNO default false help {find all the loops} hidden false no_help {find all the loops}} -opt {name exclude_sequential_elements type YESNO default true help {exclude the loops if there are sequential elements} hidden false no_help {exclude the loops if there are sequential elements}} -opt {name length type INT default 0 help {length of the loops to find} hidden false} -opt {name golden type YESNO default false help {golden design} hidden false no_help {golden design}} -opt {name revised type YESNO default false help {revised design} hidden false no_help {revised design}} -opt {name skip_library_cells type YESNO default true help {skip the library cells from the loops} hidden false no_help {skip the library cells from the loops}} get_loops 
onespin::create_command -force -arg_num -2 -arg_desc designloops -callback ::onespin_internal::feedback_loops::do_get_mapping_loop_nets -example {} -modes {setup ec} -help_short {Get the mapping nets from the golden and revised loops} -help_long {Get the mapping nets from the golden and revised loops. Get the list of pair nets that can be mapped from list golden_loops and list of revised_loops.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name replace_regexp type STRING default {} help {list of regular expressions (even number of elements) to be replaced before name-based mapping} hidden false synopsis list} get_mapping_loop_nets 
onespin::create_command -force -arg_num 1 -arg_desc filename -callback ::onespin_internal::feedback_loops::do_gen_fbl_script -example {} -modes {setup ec} -help_short {Generate the script to cut the feedback loops} -help_long {Generate the script to cut the feedback loops. If 'golden_depth' is specified, then the golden design search stops after specific depth. If 'revised_depth' is specified, then the revised design search stops after specific depth. To get all the loops use the option 'all' which uses the command 'get_loops -all' to find loops. Default value is to find shortest loops using command 'get_loops'. The script will be written to <replaceable>filename</replaceable>.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name all type YESNO default false help {use TCL command 'get_loops all' to get loops of design} hidden false no_help {use TCL command 'get_loops all' to get loops of design}} -opt {name cut_signals type YESNO default false help {cut the mapped signals} hidden false no_help {cut the mapped signals}} -opt {name golden_depth type INT default 0 help {stop search after depth in golden design} hidden false} -opt {name revised_depth type INT default 0 help {stop search after depth in revised design} hidden false} -opt {name report_time type YESNO default false help {report the timings} hidden false no_help {report the timings}} gen_fbl_script 
onespin::create_command -force -arg_num 1 -arg_desc loops -callback ::onespin_internal::feedback_loops::do_report_loops -example {} -modes {setup ec} -help_short {Report the loops} -help_long {Report the loops as one loop per line.} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} report_loops 
onespin::create_command -force -arg_num 1 -arg_desc GFV_name -callback ::onespin_internal::assertion_generation::do_create_completeness_plan -example {} -modes mv -help_short {Creates a GFV file for the current DUV and operational assertions, reads it in and opens it in the editor.} -help_long {} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name reset_prop type STRING default {} help {Allows to specify the reset property in case it cannot be automatically identified via name matching.} hidden false synopsis name} -opt {name operation_props type STRING default {} help {Allows to specify the properties to be used in the property graph in case not all properties are to be used.} hidden false synopsis list_of_names} create_completeness_plan 
onespin::create_command -force -arg_num 1 -arg_desc SVA_filename -callback ::onespin_internal::assertion_generation::do_create_sva_module -example {} -modes {cc mv} -help_short {Creates an SVA module 'SVA_filename', reads it in, and opens it in the editor.} -help_long {} -see_also sva -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition instead of the standard disable condition returned by <command>get_disable_condition</command>. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name tidal type YESNO default false help {Allows to also generate operational assertions in TiDAL block.} hidden false no_help {Allows to also generate operational assertions in TiDAL block.}} create_sva_module 
onespin::create_command -force -arg_num 1 -arg_desc VIP -callback ::onespin_internal::assertion_generation::do_instantiate_vip -example {} -modes {cc mv} -help_short {Automates the instantiation for verification IP as far as possible.} -help_long {The command prepares a verification IP like axi3 for instantiation and opens it in the internal editor. If an address signal is provided with option -addr_sig, the command tries to fill in all relevant parameters and signals for the protocol verification IP. Supported values for argument 'VIP' are 'ahb', 'apb', 'axi3', 'axi4', 'axi4lite', 'axi4stream', 'scoreboard'. For reference documantation on the supported ARM protocol, please consider the following documents:
 <itemizedlist> <listitem><para>apb       : 'AMBA 3 APB Protocol v1.0 Specification'</para></listitem> <listitem><para>ahb       : 'AMBA 3 AHB-Lite v1.0 Specification'</para></listitem> <listitem><para>axi3      : 'AMBA AXI Protocol Version 2.0 Specification'</para></listitem> <listitem><para>axi4      : 'AMBA AXI Protocol Version 2.0 Specification'</para></listitem> <listitem><para>axi4lite  : 'AMBA AXI Protocol Version 2.0 Specification'</para></listitem> <listitem><para>axi4stream: 'AMBA 4 AXI4-Stream Protocol Version 1.0 Specification'</para></listitem> </itemizedlist>} -predef_completor {type TCL callback ::onespin_internal::assertion_generation::vip_completor} -see_also {read_sva check debug} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name generated_instance_name type STRING default {} help {Allows to specify instance name of the generated SVA module.} hidden false synopsis name} -opt {completor ::onespin_internal::assertion_generation::sig_completor name data_sig type STRING default {} help {Allows to specify the data signal for a protocol VIP or scoreboard. The target module name, parameters, and other signal names will be inferred from that signal name.} hidden false synopsis signal} -opt {completor ::onespin_internal::assertion_generation::sig_completor name addr_sig type STRING default {} help {Allows to specify the address signal for a protocol VIP. The target module name, parameters, and other signal names will be inferred from that signal name.} hidden false synopsis signal} -opt {completor ::onespin_internal::assertion_generation::module_completor name module type STRING default {} help {Allows to specify target module for VIP if there is no address signal.} hidden false synopsis name} -exclusive_opt {module addr_sig} -exclusive_opt {module data_sig} -exclusive_opt {addr_sig data_sig} instantiate_vip 
onespin::create_command -force -arg_num 1 -arg_desc CSV_file -callback ::onespin_internal::connectivity::do_check_connectivity -example {} -modes mv -help_short {Carries out connectivity checks specified in CSV_file} -help_long {The CSV file contains a list of comma-separated values for easy sharing with office applications. Each line in the CSV file corresponds to a connectivity check; it is checked that the signals specified in the first 2 columns are connected. If the 3rd column is non-empty, it specifies an additional condition under which the signals are connected. Note that such a condition is not supported for structural checks. Column 4 holds an optional delay, indicating how many cycles a value from the first column takes to propagate to the 2nd column. By default, connectivity checks are without delay. Delay is not supported for structural checks. For delayed checks, columns 5 and 6 optionally hold a signal name and an edge for a clock, respectively. If either column 1 or column 2 is empty, the line in the CSV file is treated as comment and does not create a check. Example CSV file content: 
<programlisting>ahb bus
ahb_top.u_master.htrans, ahb_top.u_slave.htrans
ahb_top.u_master.hwdata, ahb_top.u_slave.hwdata, ahb_top.u_master.hwrite
ahb_top.data           , ahb_top.data_d        ,                        , 1
ahb_top.d2             , ahb_top.d2_d          ,                        , 2, ahb_top.clk2, negedge
...</programlisting>
 The first line does not contain two comma-separated columns, hence it is treated as comment. The second line contains the connectivity check for signals <literal>ahb_top.u_master.htrans</literal> and <literal>ahb_top.u_slave.htrans</literal>. For structural connectivity, this check is performed based on fanin; otherwise, it is performed with an assertion checking that the two signals always have the same value. Note that naming of signals corresponds to the language used for checking (default SVA); for structural checks, both OneSpin and SVA signal names are supported. The third line contains the conditional check 
<programlisting>if (ahb_top.u_master.hwrite) ahb_top.u_master.hwdata==ahb_top.u_slave.hwdata</programlisting>
 If connectivity is checked structurally, this condition is ignored. The 4th line checks that <literal>ahb_top.data_d</literal> is 1 cycle delayed from <literal>ahb_top.data_i</literal>. The 5th line checks that <literal>ahb_top.d2_d</literal> is 2 negedge cycles of clock <literal>ahb_top.clk2</literal> delayed from <literal>ahb_top.d2</literal>.} -predef_completor {type FILE extension csv} -see_also {check debug get_disable_condition set_disable_condition} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name language type ENUM default sva help {Language used for assertion generation.} hidden false values {sva itl}} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name assertion_type type ENUM default immediate help {Create concurrent or immediate assertions (only possible for sva).} hidden false values {concurrent immediate}} -opt {name check_type type ENUM default assertion help {Generate assertions or properties.} hidden false values {assertion property}} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition instead of the standard disable condition returned by <command>get_disable_condition</command>. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name flavor type ENUM default default help {Language flavor used for assertion generation.} hidden true values {default verilog vhdl sva}} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name case_equal type YESNO default true help {Allows to use case equality (needed to check connectivity for non-01 values)} hidden false no_help {Allows to use case equality (needed to check connectivity for non-01 values)}} -opt {name incremental type ENUM default only_on_same_options help {Allows incremental SVA file generation re-using the previously created file.} hidden false values {always never only_on_same_options}} -opt {name generated_module_name type STRING default {} help {Allows to specify module and instance name of the generated SVA module.} hidden false synopsis name} -opt {name generated_instance_name type STRING default {} help {Allows to specify instance name of the generated SVA module.} hidden false synopsis name} -opt {name combine type YESNO default true help {Allows to combine checks into one assertion according to internal heuristics} hidden false no_help {Allows to combine checks into one assertion according to internal heuristics}} -opt {name stable_select type YESNO default true help {Allows to keep the select signal stable for delayed conditional connectivity} hidden false no_help {Allows to keep the select signal stable for delayed conditional connectivity}} -opt {name type type ENUM default check help {Selects whether connectivity analysis is performed structurally or based on checks} hidden false values {check structural}} -opt {name check_dimensions type YESNO default false help {Allows to additionally create assertions to check dimensions of signals (size and direction of nested arrays)} hidden true no_help {Allows to additionally create assertions to check dimensions of signals (size and direction of nested arrays)}} -opt {completor ::onespin_internal::assertion_generation::sig_completor name signals type STRING default {} help {Performs structural connectivity analysis for the specified pair of signals} hidden false synopsis signal_pair} -exclusive_opt {verbose silent} -exclusive_opt {verbose debug} -exclusive_opt {silent debug} -exclusive_opt {signals type} -exclusive_opt {signals stable_select} -exclusive_opt {signals no_stable_select} -exclusive_opt {signals combine} -exclusive_opt {signals no_combine} -exclusive_opt {signals case_equal} -exclusive_opt {signals no_case_equal} -exclusive_opt {signals remove_check_file} -exclusive_opt {signals no_remove_check_file} -exclusive_opt {signals check_type} -exclusive_opt {signals assertion_type} -exclusive_opt {signals filename} -exclusive_opt {signals force} -exclusive_opt {signals language} -exclusive_opt {signals run_checks} -exclusive_opt {signals no_run_checks} -exclusive_opt {signals clustering} -exclusive_opt {signals no_clustering} -exclusive_opt {signals clock_edge} -exclusive_opt {signals use_disable} -exclusive_opt {signals no_use_disable} -exclusive_opt {signals disable_cond} -exclusive_opt {signals flavor} -exclusive_opt {signals clock_signal} -exclusive_opt {signals check_dimensions} -exclusive_opt {signals no_check_dimensions} check_connectivity 
onespin::create_command -force -arg_num -3 -arg_desc completeness -callback ::onespin_internal::onespin_library::do_visualize_csm -example {} -modes mv -help_short {Displays a property graph as CSM (Conceptual State Machine) transition graph.} -help_long {} -predef_completor {type TCL callback ::onespin_internal::onespin_library::visualize_csm_completor} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name exact type YESNO default false help {Allows to do an exact rendering of the property graph.} hidden false no_help {Allows to do an exact rendering of the property graph.}} -opt {name filename type STRING default {} help {Allows to specify filename instead of generating random one. In case this option is used, an output file is generated, but the CSM is not displayed.} hidden false synopsis name} -opt {name state_names type STRING default {} help {Allows to specify names for the conceptual states.} hidden false synopsis list_of_state_names} -opt {name type type ENUM default svg help {Selects filetype to create.} hidden false values {svg png}} visualize_csm 
onespin::create_command -force -arg_num 1 -arg_desc FSM_signal_name -callback ::onespin_internal::onespin_library::do_visualize_fsm -example {} -modes {cc mv} -help_short {Displays a FSM (Finite State Machine) with all current results from FSM check as transition graph.} -help_long {} -predef_completor {type TCL callback ::onespin_internal::onespin_library::visualize_fsm_completor} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name show_excluded type YESNO default false help {Allows to display excluded states and transitions.} hidden false no_help {Allows to display excluded states and transitions.}} -opt {name filename type STRING default {} help {Allows to specify filename instead of generating random one. In case this option is used, an output file is generated, but the FSM is not displayed.} hidden false synopsis name} -opt {name type type ENUM default svg help {Selects filetype to create.} hidden false values {svg png}} visualize_fsm 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::onespin_library::do_set_hdl_init_state -example {} -modes {cc mv} -help_short {Uses the HDL init values of states in the RTL as initial values (useful for FPGAs).} -help_long {} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of init states.} hidden false} -opt {name skip_signals_failing_domain type BOOL default false help {The command will not fail due to signal domain errors.} hidden false} -opt {name uninitialized_value type ENUM default free help {Allows to specify the treatment of states without explicit HDL init values.} hidden false values {0 1 free}} set_hdl_init_state 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::onespin_library::do_re_setup -example {} -modes {setup ec mv cc} -help_short {Rerun setup after modifications in source files or options.} -help_long {This command is used to automatically rerun setup after modifications in source files or setup options. The command will restore the setup status. If, for example, the design had not been compiled when this command is issued, no compilation will be performed. Moreover, the current mode will also be restored.} -see_also {elaborate compile save_lint load_lint} -opt {name lintfile type STRING default .lintresult help {Allows to specify a filename to save the current lint results.} hidden false synopsis string} -opt {name compare_lint type YESNO default true help {Compare lint results of previous and current (modified) designs} hidden false no_help {Compare lint results of previous and current (modified) designs}} -opt {name force type BOOL default false help {Forces elaboration and compilation as applicable.} hidden false} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} re_setup 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::x_checking::do_x_checking_setup -example {} -modes {setup cc mv} -help_short {Ensures a proper design setup for X-checking.} -help_long {} -see_also x_checking -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name check_effort type ENUM default none help {Run the signal domain checks with the given effort. None means to skip running the checks.} hidden false values {none minimum low medium high super maximum}} -exclusive_opt {verbose silent} -exclusive_opt {verbose debug} -exclusive_opt {silent debug} x_checking_setup 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::x_checking::do_x_checking -example {} -modes mv -help_short {Generates and checks assertions about the absence of X-related issues.} -help_long {} -see_also {x_checking_setup check debug get_disable_condition set_disable_condition} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name language type ENUM default sva help {Language used for assertion generation.} hidden false values {sva itl}} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name assertion_type type ENUM default concurrent help {Create concurrent or immediate assertions (only possible for sva).} hidden false values {concurrent immediate}} -opt {name check_type type ENUM default assertion help {Generate assertions or properties.} hidden false values {assertion property}} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition instead of the standard disable condition returned by <command>get_disable_condition</command>. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name flavor type ENUM default default help {Language flavor used for assertion generation.} hidden true values {default verilog vhdl sva}} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name categories type STRING default {output fsm clock} help {Allows to specify a list of check categories to be created. Valid categories are output, fsm, clock, and state.} hidden false synopsis list_of_categories} -opt {name generated_module_name type STRING default {} help {Allows to specify module and instance name of the generated SVA module.} hidden false synopsis name} -opt {name generated_instance_name type STRING default {} help {Allows to specify instance name of the generated SVA module.} hidden false synopsis name} -opt {name incremental type ENUM default only_on_same_options help {Allows incremental SVA file generation re-using the previously created file.} hidden false values {always never only_on_same_options}} -exclusive_opt {verbose silent} -exclusive_opt {verbose debug} -exclusive_opt {silent debug} x_checking 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::xcluster::do_check_xcluster -example {} -modes mv -help_short {Examines whether the current completeness plan(s) verify the whole I/O interface of the DUV.} -help_long {} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name check_outputs type YESNO default true help {Examines the determination of primary outputs in addition to the cluster inputs.} hidden false no_help {Examines the determination of primary outputs in addition to the cluster inputs.}} -exclusive_opt {verbose silent} -exclusive_opt {verbose debug} -exclusive_opt {silent debug} check_xcluster 
onespin::create_command -force -arg_num 1 -arg_desc State_table_file -callback ::onespin_internal::state_table::do_check_state_table -example {} -modes mv -help_short {Verifies that DUT implements given state table} -help_long {The file 'State_table_file' contains a UDP-like table description of the IO behavior of cell. Based on this file, an assertion is generated and checked that the current DUT in the tool implements the table. Multi-valued tables and checks are supported.} -predef_completor {type FILE extension st} -see_also check_cell_wiring -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition instead of the standard disable condition returned by <command>get_disable_condition</command>. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name complete type YESNO default false help {Allows to check that the table is indeed complete, i.e., the lines in the table cover all possible input values} hidden false no_help {Allows to check that the table is indeed complete, i.e., the lines in the table cover all possible input values}} -opt {name ignore_input_values type STRING default {} help {Allows to exclude input values from the full 9-valued set} hidden false synopsis string} check_state_table 
onespin::create_command -force -arg_num -2 -arg_desc netlist -callback ::onespin_internal::state_table::do_check_cell_wiring -example {} -modes mv -help_short {Verifies that DUT corresponds to netlist} -help_long {The netlist files contain descriptions of all modules of the DUT. It is checked that this wiring from the netlist is implemented in the DUT. Supported netlist formats are Titan and Spice netlists. The return value is a list of all primitives in the netlist (to be checked by check_state_table).} -predef_completor {type FILE extension {tit spi}} -see_also check_state_table -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition instead of the standard disable condition returned by <command>get_disable_condition</command>. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name top type STRING default {} help {Specifies top-level module in netlist} hidden false synopsis module} check_cell_wiring 
onespin::create_command -force -arg_num 1 -arg_desc filename -callback ::onespin_internal::tb_generation::do_create_testbench -example {} -modes {mv cc} -help_short {Creates a testbench based on the selected witness.} -help_long {The command creates a testbench that instantiates the design. Signal values for stimuli and monitors are taken from the witness specified with option -cover.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name libraries type STRING default {} help {Allows to specify additional libraries to be used} hidden false synopsis list_of_libraries} -opt {name severity type ENUM default error help {Configures the severity level of failing monitors} hidden false values {error warning display}} -opt {name time_unit type ENUM default ns help {Time unit for testbench} hidden false values {ms us ns ps}} -opt {name time_step type UINT default 5 help {Amount of TB time (in <replaceable>time_unit</replaceable>) for each step in the testbench} hidden false} -opt {name num_cycles type UINT default 0 help {Amount of cycles to export (0 means all available cycles)} hidden false} -opt {name monitor type YESNO default true help {Allows to print out all signal values as they occur during simulation.} hidden false no_help {Allows to print out all signal values as they occur during simulation.}} -opt {name use_intermediate_signals type YESNO default false help {Allows to introduce intermediate signals in Verilog testbenches to work around simulator issues.} hidden true no_help {Allows to introduce intermediate signals in Verilog testbenches to work around simulator issues.}} -opt {name flavor type ENUM default default help {Testbench language flavor. Default is to determine it from top level module language} hidden false values {default verilog vhdl}} -opt {name additional_wait type YESNO default true help {Allows to introduce an additional wait of <replaceable>time_step</replaceable> between output check and next input change} hidden false no_help {Allows to introduce an additional wait of <replaceable>time_step</replaceable> between output check and next input change}} -opt {completor ::onespin_internal::tb_generation::cover_completor name cover type STRING default {} help {Selects the assertion/cover statement to be translated to testbench stimuli and monitors} hidden false synopsis cover_assertion} -opt {completor ::onespin_internal::tb_generation::fail_completor name fail type STRING default {} help {Selects the failing assertion to be translated to testbench stimuli and monitors} hidden false synopsis fail_assertion} -exclusive_opt {verbose silent} -exclusive_opt {verbose debug} -exclusive_opt {silent debug} -exclusive_opt {cover fail} create_testbench 
onespin::create_command -force -arg_num -2 -arg_desc signal_value_pair -callback ::onespin_internal::tb_generation::do_cover_signals_values -example {} -modes mv -help_short {Creates cover statements to cover the required signals/values.} -help_long {The command creates cover statements for all the signal_value_pair arguments. A signal_value_pair argument is given by {list_of_signals list_of_values}. The command tries to cover all the bit values in the list for all the bits in the signals.} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name use_disable type YESNO default true help {Allows to de-active disabling of resets.} hidden false no_help {Allows to de-active disabling of resets.}} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name ignore_input_values type STRING default {} help {Allows to exclude input values from the full 9-valued set} hidden false synopsis string} -opt {name max_combinations type UINT default 10000 help {Maximum combination of values to be considered} hidden false} -opt {name gray_coding type YESNO default true help {Allows to create input values that change only one bit per time step} hidden false no_help {Allows to create input values that change only one bit per time step}} -opt {name time_factor type UINT default 1 help {Allows to use num_combinatios*time_factor steps to cover signals} hidden false} cover_signals_values 
onespin::create_command -force -arg_num -2 -arg_desc IPXACT_file -callback ::onespin_internal::register_checking::do_check_registers -example {<itemizedlist><listitem><para><literal>check_registers -vip_instance apb_checker my_ipxact.xml;</literal> # uses the bus signals inferred from the verification IP</para></listitem><listitem><para><literal>check_registers -vip_instance apb_checker my_ipxact.xml my_busdef.xml my_abstrdef.xml;</literal> # reads in user-defined bus definitions from additoinal XML files</para></listitem><listitem><para><literal>check_registers -signal_map {PADDR slv_inst/PADDR PSEL slv_inst/PSEL PWRITE slv_inst/PWRITE} my_ipxact.xml;</literal> # uses <literal>slv_inst/PADDR</literal> as APB address signal and so on (all required bus signals must be mapped)</para></listitem><listitem><para><literal>check_registers -vip_instance apb_checker -filter addressBlock==my_block||register=~"fast_mode*" my_ipxact.xml;</literal> # only creates checks for registers in address block <literal>my_block</literal> or for registers matching glob expression <literal>fast_mode*</literal></para></listitem><listitem><para><literal>check_registers -vip_instance apb_checker -slave_interface apb my_ipxact.xml;</literal> # uses the OneSpin VLNVs for APB in the slave interface of the component without changing the IP-XACT file</para></listitem></itemizedlist>} -modes mv -help_short {Carries out register checks specified in components, bus definitions and bus abstractions from the IP-XACT files.} -help_long {From the component definition in the IP-XACT files, the bus interfaces and address maps are parsed and for each field in a register in such a map, assertions are generated about correct initialization and correct writing to the register. These assertions are then checked and the check results are summarized. For supported standard bus protocols, use option -slave_interface to specify the protocol that belongs to the bus definition and abstraction definition associated with your memory map. Alternatively, you can use the OneSpin VLNV of the supported protocols in your IP-XACT files are (the VLNV is shown with : as a separator):
 <itemizedlist> <listitem><para>APB version 2 or 3: use VLNV <literal>ARM:AMBA:APB:3</literal> as bus definition and <literal>ARM:AMBA:APB_RTL:3</literal> as abstraction definition. For version 2, simply map <literal>PREADY</literal> to 1 and <literal>PSLVERR</literal> to 0.</para></listitem>
 <listitem><para>AHB version 2 or 3, AHBlite version 3: use VLNV <literal>ARM:AMBA:AHBLite:3</literal> as bus definition and <literal>ARM:AMBA:AHBLite_RTL:3</literal> as abstraction definition</para></listitem>
 <listitem><para>AXI4Lite: use VLNV <literal>ARM:AMBA:AXI4Lite:4</literal> as bus definition and <literal>ARM:AMBA:AXI4Lite_RTL:4</literal> as abstraction definition</para></listitem>
 <listitem><para>Wishbone: use VLNV <literal>OpenCores:wishbone:wishbone:B4</literal> as bus definition and <literal>OpenCores:wishbone:wishbone_RTL:B4</literal> as abstraction definition</para></listitem>
 </itemizedlist>} -predef_completor {type FILE extension {xml rdl}} -see_also {check debug instantiate_vip get_disable_condition set_disable_condition} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name run_checks type YESNO default true help {Allows to switch off the running of the checks.} hidden false no_help {Allows to switch off the running of the checks.}} -opt {name remove_check_file type YESNO default false help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.} hidden false no_help {Allows to automatically delete the temporary file with generated checks after checking is finished. This is useful for regression runs.}} -opt {name use_disable type YESNO default true help {Allows to de-active disable clauses in generated assertions.} hidden true no_help {Allows to de-active disable clauses in generated assertions.}} -opt {name disable_cond type STRING default {} help {Allows to specify a list of signals to be used in the disable condition instead of the standard disable condition returned by <command>get_disable_condition</command>. A leading ! indicates that the signal should be negated in the disable condition.} hidden false synopsis disable_list} -opt {name clustering type YESNO default true help {Allows to run generated assertions with clustering.} hidden true no_help {Allows to run generated assertions with clustering.}} -opt {name filename type STRING default {} help {Allows to specify a filename for the generated assertions.} hidden false synopsis name} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {completor ::onespin_internal::assertion_generation::clk_sig_completor name clock_signal type STRING default {} help {Allows to select a specific trigger clock for assertion generation.} hidden false synopsis clk} -opt {name clock_edge type ENUM default default help {Allows to select a specific edge for the trigger clock.} hidden false values {default posedge negedge edge}} -opt {name signal_map type STRING default {} help {Allows to specify the signal mapping from the logical bus signals to the master signals to be used.} hidden false synopsis map} -opt {name incremental type ENUM default only_on_same_options help {Allows incremental SVA file generation re-using the previously created file.} hidden false values {always never only_on_same_options}} -opt {name generated_module_name type STRING default {} help {Allows to specify module and instance name of the generated SVA module.} hidden false synopsis name} -opt {name generated_instance_name type STRING default {} help {Allows to specify instance name of the generated SVA module.} hidden false synopsis name} -opt {completor ::onespin_internal::assertion_generation::get_vip_instances_wo_childern name vip_instance type STRING default {} help {Allows to specify the instance name of a verification IP as an alternative to specifying a signal map.} hidden false synopsis inst} -opt {name bus_pipe type STRING default {} help {Allows to specify the pipeline ready signal for a pipelined bus.} hidden false synopsis expr} -opt {name bus_write type STRING default {} help {Allows to specify the Boolean condition for a write on the bus.} hidden false synopsis expr} -opt {name bus_read type STRING default {} help {Allows to specify the Boolean condition for a read on the bus.} hidden false synopsis expr} -opt {name bus_okay type STRING default {} help {Allows to specify the Boolean condition for an okay response of a slave.} hidden false synopsis expr} -opt {name module_pattern type STRING default %s help {Pattern to map addressBlock to DUT module/entity name. %s stands for the name of the addressBlock in IP-XACT} hidden false synopsis string} -opt {name signal_pattern type STRING default %s help {Pattern to map register/field to DUT signal name. %s stands for the field or register (in case of registers without fields). %r stands for the register name, %f for the field name in IP-XACT} hidden false synopsis string} -opt {name slave_interface type ENUM default ipxact help {Allows to overwrite the slave interface in the component definition with the VLNVs for standard protocols supported by OneSpin. The value 'ipxact' indicates that the VLNVs from the component definition should be used.} hidden false values {ipxact apb ahb axi4lite wishbone}} -opt {name unbounded type YESNO default false help {Allows to create unbounded assertions for register checking, like if a write is followed by a read, the read returns the data written by the write. Such assertions typically have much worse performance than the bounded ones} hidden true no_help {Allows to create unbounded assertions for register checking, like if a write is followed by a read, the read returns the data written by the write. Such assertions typically have much worse performance than the bounded ones}} -opt {name RDL_VLNV type STRING default {} help {When used, this option toggles SystemRDL support and set the VLNV of the bus that the RDL address map is connected to.} hidden true synopsis string} -opt {name check_volatile type YESNO default false help {Allows to create assertions that for volatile registers, the write data makes it to the DUT signal implementing the register (useful if bus writes take precedence over updates from hardware)} hidden false no_help {Allows to create assertions that for volatile registers, the write data makes it to the DUT signal implementing the register (useful if bus writes take precedence over updates from hardware)}} -opt {name strict_byte_addressing type YESNO default true help {Allows to specify the byte address handling for protocols like APB that do not specify address alignment rules. If the option is active, all address bits have to match, meaning the address has to be aligned. If the option is inactive, any misaligned access is interpreted as an aligned access to the full register.} hidden false no_help {Allows to specify the byte address handling for protocols like APB that do not specify address alignment rules. If the option is active, all address bits have to match, meaning the address has to be aligned. If the option is inactive, any misaligned access is interpreted as an aligned access to the full register.}} -opt {name address_wrap type YESNO default false help {Allows register addresses to wrap in case the address map does not cover the full address width. If the option is active and the maximum address in a 16 bit address map is for example 0xc84, bits 12 to 15 of the address are ignored.} hidden false no_help {Allows register addresses to wrap in case the address map does not cover the full address width. If the option is active and the maximum address in a 16 bit address map is for example 0xc84, bits 12 to 15 of the address are ignored.}} -opt {name dim_threshold type UINT default 16 help {Allows to specify the maximum number of checks generated for registers repeated with the dim attribute. For a register with dim 64, a threshold of 16 will generate 16 checks, one for every 4th register.} hidden false} -opt {name parameter_map type STRING default {reset synchronousResetSignal we writeEnableSignal addr_enable addressEnableSignal sig_activation signalActivation sig_name signalName ab_name moduleName} help {Allows to specify the parameter names used to encode synchronous resets, write enables, address enables, signal and module names. For boolean parameters, a leading ! in the name indicates a low active parameter.} hidden false synopsis map} -opt {name use_dut_signals type YESNO default false help {Allows to use the DUT signals implementing the registers in the created assertions.} hidden false no_help {Allows to use the DUT signals implementing the registers in the created assertions.}} -opt {name use_functions type YESNO default true help {Allows to use functions for bus read/write to generate more readable assertions.} hidden false no_help {Allows to use functions for bus read/write to generate more readable assertions.}} -opt {name use_byte_write type YESNO default true help {Handles byte enables from the bus for register access.} hidden false no_help {Handles byte enables from the bus for register access.}} -opt {name filter type STRING default {} help {Allows to filter generated checks on memoryMap, addressBlock, registerFile, register, or field. Valid operators are ==, !=, =~, !~, the latter two allowing for globbing. In addition, &amp;&amp;, ||, () can be used to build more complex expressions.} hidden false synopsis string} -opt {name error_on_illegal type YESNO default true help {Allows to create assertions for access of unspecified addresses and write values outside of constraints.} hidden false no_help {Allows to create assertions for access of unspecified addresses and write values outside of constraints.}} -opt {name strict_enum_checking type YESNO default false help {Allows to create additional assertions for enumeration values.} hidden false no_help {Allows to create additional assertions for enumeration values.}} -opt {name plugin type STRING default {} help {Allows to specify a tcl procedure as modifier for conditions.} hidden true synopsis tcl_proc} -opt {name additional_rtl type STRING default {} help {Allows to add additional RTL code, including new signals.} hidden false synopsis code} -opt {name combinational_read type YESNO default false help {Allows to optimize assertions for registered or combinational read access. The exact timing of reads is required for volatile registers when using DUT signals.} hidden false no_help {Allows to optimize assertions for registered or combinational read access. The exact timing of reads is required for volatile registers when using DUT signals.}} -opt {name debugger_integration type YESNO default true help {Allows to switch off debugger integration.} hidden false no_help {Allows to switch off debugger integration.}} -opt {name combine_fields type YESNO default true help {Allows to automatically combine checks for fields into one check for the whole register.} hidden false no_help {Allows to automatically combine checks for fields into one check for the whole register.}} -opt {name max_regs_debugger_integration type UINT default 512 help {If the number of registers exceeds this limit, debugger integration will be de-activated.} hidden false} -exclusive_opt {verbose silent} -exclusive_opt {verbose debug} -exclusive_opt {silent debug} -exclusive_opt {signal_map vip_instance} check_registers 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::explore::do_explore -example {<itemizedlist><listitem><para><literal>explore -add_scenario read_burst;</literal> # adds named scenario</para></listitem><listitem><para><literal>explore -add_config my_mode_reg=0x40;</literal> # requires my_mode_reg to be programmed to value 0x40</para></listitem><listitem><para><literal>explore -update;</literal> # computes simulation trace fulfilling above requirement</para></listitem><listitem><para><literal>explore -add_transaction {my_fsm idle->read_start->read_burst->read_last->idle};</literal> # requires fsm transaction through sequence of states</para></listitem><listitem><para><literal>explore -update;</literal> # computes simulation trace fulfilling all above requirements</para></listitem></itemizedlist>} -modes mv -help_short {Performs design exploration by using formal technology to automatically produce interesting simulation traces.} -help_long {This command allows to manage various design exploration scenarios. Each scenario consists of 3 phases: programming of configuration, transactions, and settle time. New scenarios can be added with -add_scenario.} -see_also debug -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name get_scenarios type BOOL default false help {Returns all named scenarios.} hidden false} -opt {name get_current_scenario type BOOL default false help {Returns the current scenario.} hidden false} -opt {name report_scenarios type BOOL default false help {Gives a detailes report of all scenarios.} hidden false} -opt {name add_scenario type STRING default {} help {Adds a new scenario.} hidden false synopsis name} -opt {completor ::onespin_internal::explore::scenario_completor name set_current_scenario type STRING default {} help {Allows to select the current scenario.} hidden false synopsis name} -opt {completor ::onespin_internal::explore::scenario_completor name remove_scenario type STRING default {} help {Removes the specified scenario.} hidden false synopsis name} -opt {name update type BOOL default false help {Updates the current scenario to SVA and re-runs the witness computation to find the required simulation trace.} hidden false} -opt {name csv_update type STRING default {} help {Updates the current scenario to SVA and re-runs the witness computation to find the required simulation trace.} hidden true synopsis filename} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name set_settle_time type STRING default {} help {Sets the number of cycles after the transition phase.} hidden false synopsis cycles} -opt {name add_config type STRING default {} help {Adds programming of a register 'signal=value' in the configuration phase.} hidden false synopsis configuration} -opt {name remove_config type BOOL default false help {Removes the list element identified via -index from the list of configuration programming values.} hidden false} -opt {name index type STRING default end help {Index for list valued options. Indices can be natural numbers, end, or end-n with a natural number n.} hidden false synopsis index} -opt {completor ::onespin_internal::explore::phase_completor name phase type STRING default all help {Allows to select phases to which constraints are applied.} hidden false synopsis phase} -opt {completor ::onespin_internal::assertion_generation::sig_completor name add_stable_input type STRING default {} help {Keeps the specified signal constant in the required phases.} hidden false synopsis signal} -opt {name remove_stable_input type BOOL default false help {Removes the list element identified via -index from the list of stable inputs for the specified phases.} hidden false} -opt {name add_constrained_input type STRING default {} help {Applies the constraint 'signal=value' to the specified phases.} hidden false synopsis constraint} -opt {name remove_constrained_input type BOOL default false help {Removes the list element identified via -index from the list of constrained signals for the specified phases.} hidden false} -opt {completor ::onespin_internal::explore::fsm_transaction_completor name add_transaction type STRING default {} help {Adds a transaction specified either as an FSM transition 'fsm_check_n.trans_a_b' or as a pair {signal val1->val2->...->valn}.} hidden false synopsis transaction} -opt {name remove_transaction type BOOL default false help {Removes the last transaction from the list of transactions.} hidden false} -opt {name compute_code_coverage type BOOL default false help {Computes the code coverage of the simulation trace.} hidden false} -opt {name create_testbench type BOOL default false help {Creates a SystemVerilog testbench to reproduce the simulation trace in an external tool.} hidden false} -exclusive_opt {get_scenarios get_current_scenario} -exclusive_opt {get_scenarios report_scenarios} -exclusive_opt {get_scenarios add_scenario} -exclusive_opt {get_scenarios set_current_scenario} -exclusive_opt {get_scenarios remove_scenario} -exclusive_opt {get_scenarios update} -exclusive_opt {get_scenarios set_settle_time} -exclusive_opt {get_scenarios add_config} -exclusive_opt {get_scenarios remove_config} -exclusive_opt {get_scenarios add_stable_input} -exclusive_opt {get_scenarios remove_stable_input} -exclusive_opt {get_scenarios add_constrained_input} -exclusive_opt {get_scenarios remove_constrained_input} -exclusive_opt {get_scenarios add_transaction} -exclusive_opt {get_scenarios remove_transaction} -exclusive_opt {get_scenarios compute_code_coverage} -exclusive_opt {get_scenarios create_testbench} -exclusive_opt {get_scenarios phase} -exclusive_opt {get_scenarios index} -exclusive_opt {get_scenarios force} -exclusive_opt {get_current_scenario report_scenarios} -exclusive_opt {get_current_scenario add_scenario} -exclusive_opt {get_current_scenario set_current_scenario} -exclusive_opt {get_current_scenario remove_scenario} -exclusive_opt {get_current_scenario update} -exclusive_opt {get_current_scenario set_settle_time} -exclusive_opt {get_current_scenario add_config} -exclusive_opt {get_current_scenario remove_config} -exclusive_opt {get_current_scenario add_stable_input} -exclusive_opt {get_current_scenario remove_stable_input} -exclusive_opt {get_current_scenario add_constrained_input} -exclusive_opt {get_current_scenario remove_constrained_input} -exclusive_opt {get_current_scenario add_transaction} -exclusive_opt {get_current_scenario remove_transaction} -exclusive_opt {get_current_scenario compute_code_coverage} -exclusive_opt {get_current_scenario create_testbench} -exclusive_opt {get_current_scenario compute_code_coverage} -exclusive_opt {get_current_scenario create_testbench} -exclusive_opt {get_current_scenario phase} -exclusive_opt {get_current_scenario index} -exclusive_opt {get_current_scenario force} -exclusive_opt {report_scenarios add_scenario} -exclusive_opt {report_scenarios set_current_scenario} -exclusive_opt {report_scenarios remove_scenario} -exclusive_opt {report_scenarios update} -exclusive_opt {report_scenarios set_settle_time} -exclusive_opt {report_scenarios add_config} -exclusive_opt {report_scenarios remove_config} -exclusive_opt {report_scenarios add_stable_input} -exclusive_opt {report_scenarios remove_stable_input} -exclusive_opt {report_scenarios add_constrained_input} -exclusive_opt {report_scenarios remove_constrained_input} -exclusive_opt {report_scenarios add_transaction} -exclusive_opt {report_scenarios remove_transaction} -exclusive_opt {report_scenarios compute_code_coverage} -exclusive_opt {report_scenarios create_testbench} -exclusive_opt {report_scenarios phase} -exclusive_opt {report_scenarios index} -exclusive_opt {report_scenarios force} -exclusive_opt {add_scenario set_current_scenario} -exclusive_opt {add_scenario remove_scenario} -exclusive_opt {add_scenario update} -exclusive_opt {add_scenario set_settle_time} -exclusive_opt {add_scenario add_config} -exclusive_opt {add_scenario remove_config} -exclusive_opt {add_scenario add_stable_input} -exclusive_opt {add_scenario remove_stable_input} -exclusive_opt {add_scenario add_constrained_input} -exclusive_opt {add_scenario remove_constrained_input} -exclusive_opt {add_scenario add_transaction} -exclusive_opt {add_scenario remove_transaction} -exclusive_opt {add_scenario compute_code_coverage} -exclusive_opt {add_scenario create_testbench} -exclusive_opt {add_scenario phase} -exclusive_opt {add_scenario index} -exclusive_opt {add_scenario force} -exclusive_opt {set_current_scenario remove_scenario} -exclusive_opt {set_current_scenario update} -exclusive_opt {set_current_scenario set_settle_time} -exclusive_opt {set_current_scenario add_config} -exclusive_opt {set_current_scenario remove_config} -exclusive_opt {set_current_scenario add_stable_input} -exclusive_opt {set_current_scenario remove_stable_input} -exclusive_opt {set_current_scenario add_constrained_input} -exclusive_opt {set_current_scenario remove_constrained_input} -exclusive_opt {set_current_scenario add_transaction} -exclusive_opt {set_current_scenario remove_transaction} -exclusive_opt {set_current_scenario compute_code_coverage} -exclusive_opt {set_current_scenario create_testbench} -exclusive_opt {set_current_scenario phase} -exclusive_opt {set_current_scenario index} -exclusive_opt {set_current_scenario force} -exclusive_opt {remove_scenario compute_code_coverage} -exclusive_opt {remove_scenario create_testbench} -exclusive_opt {remove_scenario update} -exclusive_opt {remove_scenario set_settle_time} -exclusive_opt {remove_scenario add_config} -exclusive_opt {remove_scenario remove_config} -exclusive_opt {remove_scenario add_stable_input} -exclusive_opt {remove_scenario remove_stable_input} -exclusive_opt {remove_scenario add_constrained_input} -exclusive_opt {remove_scenario remove_constrained_input} -exclusive_opt {remove_scenario add_transaction} -exclusive_opt {remove_scenario remove_transaction} -exclusive_opt {remove_scenario compute_code_coverage} -exclusive_opt {remove_scenario create_testbench} -exclusive_opt {remove_scenario phase} -exclusive_opt {remove_scenario index} -exclusive_opt {remove_scenario force} -exclusive_opt {update set_settle_time} -exclusive_opt {update add_config} -exclusive_opt {update remove_config} -exclusive_opt {update add_stable_input} -exclusive_opt {update remove_stable_input} -exclusive_opt {update add_constrained_input} -exclusive_opt {update remove_constrained_input} -exclusive_opt {update add_transaction} -exclusive_opt {update remove_transaction} -exclusive_opt {update compute_code_coverage} -exclusive_opt {update create_testbench} -exclusive_opt {update phase} -exclusive_opt {update index} -exclusive_opt {set_settle_time add_config} -exclusive_opt {set_settle_time remove_config} -exclusive_opt {set_settle_time add_stable_input} -exclusive_opt {set_settle_time remove_stable_input} -exclusive_opt {set_settle_time add_constrained_input} -exclusive_opt {set_settle_time remove_constrained_input} -exclusive_opt {set_settle_time add_transaction} -exclusive_opt {set_settle_time remove_transaction} -exclusive_opt {set_settle_time compute_code_coverage} -exclusive_opt {set_settle_time create_testbench} -exclusive_opt {set_settle_time phase} -exclusive_opt {set_settle_time index} -exclusive_opt {set_settle_time force} -exclusive_opt {add_config remove_config} -exclusive_opt {add_config add_stable_input} -exclusive_opt {add_config remove_stable_input} -exclusive_opt {add_config add_constrained_input} -exclusive_opt {add_config remove_constrained_input} -exclusive_opt {add_config add_transaction} -exclusive_opt {add_config remove_transaction} -exclusive_opt {add_config compute_code_coverage} -exclusive_opt {add_config create_testbench} -exclusive_opt {add_config phase} -exclusive_opt {add_config index} -exclusive_opt {add_config force} -exclusive_opt {remove_config add_stable_input} -exclusive_opt {remove_config remove_stable_input} -exclusive_opt {remove_config add_constrained_input} -exclusive_opt {remove_config remove_constrained_input} -exclusive_opt {remove_config add_transaction} -exclusive_opt {remove_config remove_transaction} -exclusive_opt {remove_config compute_code_coverage} -exclusive_opt {remove_config create_testbench} -exclusive_opt {remove_config phase} -exclusive_opt {remove_config force} -exclusive_opt {add_stable_input remove_stable_input} -exclusive_opt {add_stable_input add_constrained_input} -exclusive_opt {add_stable_input remove_constrained_input} -exclusive_opt {add_stable_input add_transaction} -exclusive_opt {add_stable_input remove_transaction} -exclusive_opt {add_stable_input compute_code_coverage} -exclusive_opt {add_stable_input create_testbench} -exclusive_opt {add_stable_input index} -exclusive_opt {remove_stable_input add_constrained_input} -exclusive_opt {remove_stable_input remove_constrained_input} -exclusive_opt {remove_stable_input add_transaction} -exclusive_opt {remove_stable_input remove_transaction} -exclusive_opt {remove_stable_input compute_code_coverage} -exclusive_opt {remove_stable_input create_testbench} -exclusive_opt {add_constrained_input remove_constrained_input} -exclusive_opt {add_constrained_input add_transaction} -exclusive_opt {add_constrained_input remove_transaction} -exclusive_opt {add_constrained_input index} -exclusive_opt {add_constrained_input compute_code_coverage} -exclusive_opt {add_constrained_input create_testbench} -exclusive_opt {remove_constrained_input add_transaction} -exclusive_opt {remove_constrained_input remove_transaction} -exclusive_opt {remove_constrained_input compute_code_coverage} -exclusive_opt {remove_constrained_input create_testbench} -exclusive_opt {add_transaction remove_transaction} -exclusive_opt {add_transaction compute_code_coverage} -exclusive_opt {add_transaction create_testbench} -exclusive_opt {remove_transaction index} -exclusive_opt {remove_transaction compute_code_coverage} -exclusive_opt {remove_transaction create_testbench} -exclusive_opt {add_transaction index} -exclusive_opt {compute_code_coverage create_testbench} -exclusive_opt {compute_code_coverage phase} -exclusive_opt {compute_code_coverage index} -exclusive_opt {create_testbench phase} -exclusive_opt {create_testbench index} explore 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::explore::do_sva -example {<itemizedlist><listitem><para><literal>sva -assume top.test_mode_i==0;</literal> # constrains test_mode_i to 0</para></listitem><listitem><para><literal>check [sva -assert {cache_i.flag[1]}];</literal> # generates and checks assertion</para></listitem></itemizedlist>} -modes mv -help_short {Creates assertions from the command line.} -help_long {This command allows to simply specify assertions in TCL. Constraints and cover points are supported with options -assume and -cover.} -see_also {check create_sva_module} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name get type BOOL default false help {Returns TCL assertions as 4-element lists {name type body message}.} hidden false} -opt {name assert type STRING default {} help {Creates an assertion and returns its hierarchical name.} hidden false synopsis assertion_body} -opt {name assume type STRING default {} help {Creates a constraint and returns its hierarchical name.} hidden false synopsis assertion_body} -opt {name cover type STRING default {} help {Creates a cover point and returns its hierarchical name.} hidden false synopsis assertion_body} -opt {name message type STRING default {} help {Message to be displayed on failing assertion or passing cover point.} hidden false synopsis string} -opt {completor ::onespin_internal::explore::assertion_completor name remove type STRING default {} help {Removes the specified assertion.} hidden false synopsis name} -opt {name update type BOOL default false help {Updates the TCL assertions to SVA.} hidden false} -exclusive_opt {assume assert} -exclusive_opt {assume cover} -exclusive_opt {assume get} -exclusive_opt {assume remove} -exclusive_opt {assume update} -exclusive_opt {assert cover} -exclusive_opt {assert get} -exclusive_opt {assert remove} -exclusive_opt {assert update} -exclusive_opt {cover get} -exclusive_opt {cover remove} -exclusive_opt {cover update} -exclusive_opt {get remove} -exclusive_opt {get update} -exclusive_opt {update remove} -exclusive_opt {message get} -exclusive_opt {message remove} -exclusive_opt {message assume} -exclusive_opt {force get} sva 
onespin::create_command -force -arg_num 0 -arg_desc {} -callback ::onespin_internal::cdc::do_check_cdc -example {<itemizedlist><listitem><para><literal>check_cdc;</literal> # this puts all clocks into individual domains.</para></listitem><listitem><para><literal>check_cdc -clock_domains {{clk_a clk_b}};</literal> # this puts <literal>clk_a</literal> and <literal>clk_b</literal> into the same clock domain. If further clocks exist, they are put into individual domains.</para></listitem><listitem><para><literal>check_cdc -clock_domains {{clk_a clk_b} {clk_c clk_d}};</literal> # this puts <literal>clk_a</literal> and <literal>clk_b</literal> into the same clock domain and <literal>clk_c</literal> and <literal>clk_d</literal> into a second clock domain. If further clocks exist, they are put into individual domains.</para></listitem></itemizedlist>} -modes {setup mv cc} -help_short {Carries out Clock-Domain-Crossing checks.} -help_long {This command performs a structural clock domain analysis and reports clock domain crossing issues. For each signal crossing from a clock domain A to a domain B, it first reports the corresponding signals names and the classification into control signals with 2-FF synchronizer or data signals. In addition, it reports issues of convergence and divergence for the control signals and re-convergence for the data signals. It also groups data signals with the control signals used to guard them and reports additional re-covergence issues for these data signals. In addition to producing the corresponding messages in the shell, this info is also dumped to HTML and displayed in a tab.} -see_also {set_clock_spec add_clock_spec} -opt {name verbose type BOOL default false help {Create more detailed information messages.} hidden false} -opt {name silent type BOOL default false help {Do not generate any information or warning messages.} hidden false} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} -opt {name type type ENUM default structural help {Allows to specify the kind of CDC analysis to be carried out.} hidden true values {structural metastability data_consistency}} -opt {name clock_domains type STRING default {} help {Allows to group clocks into domains, each containing a list of clocks. All clocks not listed explicitly are in their own clock domain.} hidden false synopsis list_of_domains} -opt {name combine_bits type YESNO default true help {Combines bits to whole signals in CDC report} hidden false no_help {Combines bits to whole signals in CDC report}} -opt {completor_extension html name html_file type FILE default {} help {Allows to specify a filename for the generated HTML report for structural analysis.} hidden false} -opt {name force type BOOL default false help {Forces overwriting of files.} hidden false} -opt {name use_backwards_jitter type YESNO default true help {Allows to introduce backwards jitter as well.} hidden true no_help {Allows to introduce backwards jitter as well.}} check_cdc 
onespin::create_command -force -arg_num 1 -arg_desc assertion -callback ::onespin_internal::coverage::do_compute_bounded_coverage -example {} -modes mv -help_short {Computes the bounded coverage of an assertion} -help_long {This command computes the bounded coverage of an assertion  by flagging all branches in the source code which have not been inspected by the assertion. Any branch which is not reachable in less or equal steps than the bounded radius of the assertion  is considered as uncovered.} -predef_completor {type TCL callback ::onespin_internal::coverage::assertion_completor} -see_also {check_consistency check quantify} -opt {name debug type BOOL default false help {Be even more verbose for debugging purposes.} hidden true} compute_bounded_coverage 
onespin::create_command -force -callback onespin::vlog::vlog -arg_num -2 -arg_desc <args> -help_short {Compiles (System)Verilog files supporting typical options from simulators.} -help_long {The vlog command can be used to compile designs with existing command line calls from simulation like
			<programlisting>vlog -f dut.flist</programlisting>
	Please check the section 'Read in HDL Files (alternative vlog style)' in the user manual for more information on the supported options.} -modes setup -no_option_parsing -see_also {vcom read_verilog elaborate compile} -example {<itemizedlist><listitem><para><literal>vlog -elaborate;</literal> # does the design setup including elaboration </para></listitem><listitem><para><literal>vlog -compile;</literal> # does the design setup including compilation</para></listitem><listitem><para><literal>vlog -script &lt;script.tcl&gt;;</literal> # executes the given script after the design setup</para></listitem></itemizedlist>} vlog 
onespin::create_command -force -callback onespin::vlog::vcom -arg_num -2 -arg_desc <args> -help_short {Compiles VHDL files supporting typical options from simulators.} -help_long {The vcom command can be used to compile designs with existing command line calls from simulation like
			<programlisting>vcom -f dut.flist</programlisting>
	Please check the section 'Read in HDL Files (alternative vlog/vcom style)' in the user manual for more information on the supported options.} -modes setup -no_option_parsing -see_also {vlog read_vhdl elaborate compile} -example {<itemizedlist><listitem><para><literal>vcom -elaborate;</literal> # does the design setup including elaboration </para></listitem><listitem><para><literal>vcom -compile;</literal> # does the design setup including compilation</para></listitem><listitem><para><literal>vcom -script &lt;script.tcl&gt;;</literal> # executes the given script after the design setup</para></listitem></itemizedlist>} vcom 
onespin::noop 
onespin::create_command -force -callback onespin::fsm::include_fsm_state_impl -arg_num -1 -arg_desc {<fsm_id> <state>} -help_short {include the check for an fsm state} -modes {cc mv} -see_also {exclude_fsm_state_check include_fsm_transition_check exclude_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_state_subchecks include_fsm_state_check 
onespin::create_command -force -callback onespin::fsm::exclude_fsm_state_impl -arg_num -1 -arg_desc {<fsm_id> <state>} -help_short {exclude the check for an fsm state as if it were non existent in HDL (syntactically unreachable)} -modes {cc mv} -opt { name "reason" type "STRING" help "a reason for an exclusion" synopsis "<reason>" default "no reason" } -see_also {include_fsm_state_check include_fsm_transition_check exclude_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_state_subchecks exclude_fsm_state_check 
onespin::create_command -force -callback onespin::fsm::include_fsm_transition_impl -arg_num -1 -arg_desc {<fsm_id> <state-from> <state-to>} -help_short {include the check for an fsm transition} -modes {cc mv} -see_also {exclude_fsm_state_check include_fsm_state_check exclude_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_trans_subchecks include_fsm_transition_check 
onespin::create_command -force -callback onespin::fsm::exclude_fsm_transition_impl -arg_num -1 -arg_desc {<fsm_id> <state-from> <state-to>} -help_short {exclude the check for an fsm transition as if it were non existent in HDL (syntactically unreachable)} -modes {cc mv} -opt { name "reason" type "STRING" help "a reason for an exclusion" synopsis "<reason>" default "no reason" } -see_also {exclude_fsm_state_check include_fsm_state_check include_fsm_transition_check get_excluded_fsm_checks} -arg_completor onespin::fsm::fsm_trans_subchecks exclude_fsm_transition_check 
onespin::create_command -force -callback onespin::fsm::get_excluded_fsm_checks_impl -arg_num 0 -help_short {retrieve all excluded fsm checks and subchecks} -see_also {exclude_fsm_state_check include_fsm_state_check include_fsm_transition_check exclude_fsm_transition_check} -modes {cc mv} get_excluded_fsm_checks 
onespin::noop 
set_mode setup 
clear_design 
delete_design 
start_message_log -force onespin.log 
get_read_hdl_option -vhdl_version 
::read_vhdl -version 93 -display_errors_only -ignore_pragma_settings -library synopsys /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/synopsys/orig/*.vhd 
get_read_hdl_option -vhdl_version 
::read_vhdl -display_errors_only -ignore_pragma_settings -library ieee {/softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_1164.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_arith.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_signed.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_unsigned.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_misc.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/gs_types.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_textio.vhd.02 /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_components.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/std_logic_entities.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/math_real.vhd.02 /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/math_complex.vhd.02 /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/timing_p.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/timing_b.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/prmtvs_p.vhd /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/ulogic_arithmetic.vhd} 
::read_vhdl -display_errors_only -ignore_pragma_settings -library ieee -version 87 /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/prmtvs_b.vhd 
::read_vhdl -display_errors_only -ignore_pragma_settings -library onespin /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/onespin/orig/substitute.vhd 
get_read_hdl_option -vhdl_version 
::read_vhdl -display_errors_only -ignore_pragma_settings -noignore_numericstd -library ieee -pragma_ignore {} -version 93 {/softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/numeric_std.vhd.02 /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ieee/orig/numeric_bit.vhd.02} 
::read_vhdl -display_errors_only -ignore_pragma_settings -library ncutils -version 93 /softslin/onespin360_2016_06_SP2016_09_28/lib/vhdl/ncutils/orig/ncutilities.vhdl 
read_vhdl -version 2008 ../vhd_ko/*.vhd 
read_vhdl -version 2008 ../psl/genbuf.psl 
elaborate 
set_compile_option -undriven_value input 
compile 
set_reset_sequence -high RST 
set_mode cc 
onespin::set_vip_waves {} 
check_consistency 
set_mode mv 
onespin::set_vip_waves {} 
get_checks -filter flavor==sva 
set_check_option -parallel local -local_processes 4 
get_assertions 
check_assertion {psl/btor_ack_disable_req_0 psl/btor_ack_disable_req_1 psl/btor_req_until_ack_0 psl/btor_req_until_ack_1 psl/data_e_w_0 psl/data_e_w_1 psl/data_e_w_2 psl/data_e_w_3 psl/deassert_data psl/genbuf_f_o_1 psl/genbuf_f_o_2 psl/genbuf_f_o_3 psl/genbuf_f_o_4 psl/not_c_0 psl/not_c_1 psl/round_robin0 psl/stob_deassert_ack_0 psl/stob_deassert_ack_1 psl/stob_deassert_ack_2 psl/stob_deassert_ack_3 psl/stob_first_deassert_req_0 psl/stob_first_deassert_req_1 psl/stob_first_deassert_req_2 psl/stob_first_deassert_req_3 psl/stob_req_ack_0 psl/stob_req_ack_1 psl/stob_req_ack_2 psl/stob_req_ack_3 psl/stob_req_before_ack_0 psl/stob_req_before_ack_1 psl/stob_req_before_ack_2 psl/stob_req_before_ack_3} 
stop_message_log 
